Daniel Li       dal279
Jason Merchan   jm2693

Test plans: 

Malloc should:
- should not allocate more when full
- should allocate without overlapping
- should only allocate specified size
- should not allocate invalid sizes (0, -numbers, numbers>MEMLENGTH-sizeof(metadata))
- should return pointer to payload

Free should:
- should only free specified chunk
- should free entire chunk (not from the middle)
- should automatically coalece 
    - rids of previous headers 
    - merge adjacent chunks to fill gaps to allow for bigger memory allocations 
    - registers now empty spaces as free space
- should not deal with memory fragmentation 
- should only free valid inputs (must be allocated and at beginning of header)

Malloc checks:
- Allocate something that is larger than memory array                               //expect error
- Allocate something that is larger than available space in array                   //expect error
- Allocate something that fits in memory array capacity                             //expect success
- Allocate something that was deallocated (especially one that held max capacity)   //expect success 
- Random edge case: try to allocate 0 bytes                                         //expect error 

Free checks: 
- Free something that was not initialized through malloc                            //expect error
- Free something that is not at the start of the chunk                              //expect error
- Free something a second time                                                      //expect error
- Free something that has been allocated (only data allocated)                      //expects success         
- only coalesce free adjacent chunks                  



Design Choices:
- We created a struct called metadata to house two ints, representing the metadata of the header. One indicating size and the other if it is in use.
    - Two ints fit best because that way we would be able to easily get the values through the array itself, in terms of ints. For 
    - example, a pointer to a metadata will have the size component stored at (int*)metadata[0] and the in use at (int*)metadata[1].
    - Moreover, it is the same size as a double, working conveniently for alignment. 
- Our malloc structure is based off of a linked list. The size component in each header includes the size allocated as well as the 
    - size of the header itself. If a pointer is pointing to the beginning of a header, the next header will be (size) bytes away.
- We thought of potentially including an extra pointer in our header, constantly pointing to the next biggest free space. This 
    - has its pros and cons. Mainly it would be faster, but it would likely come at the at the cost of memory and may cause more 
    - memory fragmentation. Ultimately for a small heap size such as this one, we decided the increase in speed was not worth it 
    - and decided to go with this more traditional design.
- The main way mymalloc() and myfree() function is through the use of while loops, iterating across the entire array each time 
    - a request to malloc or free occurs. This results in linear time complexity. In each loop, it searches for possible situations
    - where a chunk COULD be allocated and if nothing is found by the end of the loop, it most likely does not meet the conditions
    - for being allocated or being freed. 


Official memgrind test cases:

test1():
 - allocates 1 byte 120 times and immediately deallocates it before the next allocation
 - after that it should be able to allocate a large chunk as the memory should be free
 - our avg time: 1.72 ms 
 - real malloc avg time: 0.92 ms

test2():
 - allocates 1 byte 120 times and deallocates all the allocated bytes after all of them have been allocated 
 - after that it should be able to allocate a large chunk as the memory should be free
 - our avg time: 1.08 ms
 - real malloc avg time: 1.31 ms

test3():
- creates an array of 120 pointers. randomly allocates or deallocates 1 byte. continues, until there 
- stress tests allocating and deallocating only specified bytes
 - our avg time: 1.50 ms
 - real malloc avg time: 1.18 ms

 test4():
- stress tests the coalecing aspect of mymalloc. allocates 3 pointers, frees the first and second. 
- allocates a fourth that should be placed before the third as its size permits.
 - our avg time: 0.38 ms
 - real malloc avg time: 0.37 ms

 test5():
 - allocate 1000 byte chunks 4 times, frees 1st and 3rd. next try to allocate 2000 bytes, which should fail as we do 
    - not coalesce the 1st and 3rd empty chunks as they are memory fragmentations.
 - our avg time: 0.02 ms
 - real malloc avg time: 0.03 ms


// avg time is calculated based on running each test 50 times \\

Notes:
- Something very interesting we found was the time difference between mymalloc and the real malloc. We expected malloc to be consistently
    - faster than our version, like test1. However, in some cases, namely, 3, 4 and 5, the times were decently close. 
    - Surprisingly, our test2 was faster than the real malloc. Perhaps this may have to contribute with malloc not being optimized
    - for allocated so many small and continuous bytes, repeatedly. The real malloc also failed to pass our test4, which was 
    - very surprising!
- Our memtest.c file includes a main file labeled int _main(int argc, char* argv[]), as to not confuse the makefile. 

Official memtest test cases:

testA():
 - try to malloc in same location twice
 - free it twice
 - should fail
testB():
 - try to allocate a value bigger than memory
 - should fail
 - try to free the failed allocation
 - should fail
testC():
 - try to allocate 0 bytes
 - should fail
 - try to free the failed allocation
 - should fail
 testE(): 
 - allocates 100 ints
 - assign q to p 
 - free both of them
 - should fail 
 testF():
 - free an address of an int that was not initialized in malloc
 - should fail
 testG: 
 - allocate a negative number
 - try to free it 
 - should fail allocating it (invalid number) and should fail to free as it wasn't allocated

