Daniel Li       dal279
Jason Merchan   jm2693

Test plans: 

Malloc should:
- should not allocate more when full
- should allocate without overlapping
- should only allocate specified size

Free should:
- should only free specified chunk
- should free entire chunk (not from the middle)
- should automatically coalece 
    - rids of previous headers 
    - merge adjacent chunks to fill gaps to allow for bigger memory allocations 
    - registers now empty spaces as free space
- should deal with memory fragmentation // maybe not?

Malloc checks:
- Allocate something that is larger than memory array                               //expect error
- Allocate something that is larger than available space in array                   //expect error
- Allocate something that fits in memory array capacity                             //expect success
- Allocate something that was deallocated (especially one that held max capacity)   //expect success 
- Random edge case: try to allocate 0 bytes                                         //expect error 

Free checks: 
- Free something that was not initialized through malloc                            //expect error
- Free something that is not at the start of the chunk                              //expect error
- Free something a second time                                                      //expect error
- Free something that has been allocated (only data allocated)                      //expects success         
- only coalesce free adjacent chunks                  



Runtime Choices:
- added additional header to the beginning of the array with a pointer to the largest free chunk
    this allows for O(1) avg time when allocated memory 


Official memgrind test cases:

testA():
 - allocates 1 byte 120 times and immediately deallocates it before the next allocation
 - after that it should be able to allocate a large chunk as the memory should be free
testB():
 - allocates 1 byte 120 times and deallocates all the allocated bytes after all of them have been allocated 
 - after that it should be able to allocate a large chunk as the memory should be free
testC():
 - 
test1():
 - try to malloc in same location twice
 - free it twice
 - should fail
test2():
 - try to allocate a value bigger than memory
 - should fail
 - try to free the failed allocation
 - should fail
test3():
 - try to allocate 0 bytes
 - should fail
 - try to free the failed allocation
 - should fail
test4():
 - allocate 1000 byte chunks 4 times 
 - free 1st and third 
 - try to allocate 2000 bytes
 - should fail as we do not coalesce the 1st and third empty chunks
