Daniel Li       dal279
Jason Merchan   jm2693

Test plans: 

Malloc should:
- should not allocate more when full
- should allocate without overlapping
- should only allocate specified size

Free should:
- should only free specified chunk
- should free entire chunk (not from the middle)
- should automatically coalece 
    - rids of previous headers 
    - merge adjacent chunks to fill gaps to allow for bigger memory allocations 
    - registers now empty spaces as free space
- should deal with memory fragmentation // maybe not?

Malloc checks:
- Allocate something that is larger than memory array                               //expect error
- Allocate something that is larger than available space in array                   //expect error
- Allocate something that fits in memory array capacity                             //expect success
- Allocate something that was deallocated (especially one that held max capacity)   //expect success 
- Random edge case: try to allocate 0 bytes                                         //expect error 

Free checks: 
- Free something that was not initialized through malloc                            //expect error
- Free something that is not at the start of the chunk                              //expect error
- Free something a second time                                                      //expect error
- Free something that has been allocated (only data allocated)                      //expects success         
- only coalesce free adjacent chunks                  


Memgrind Testing:
- malloc() and immediately free() a 1-byte object, 120 times
- Use malloc() to get 120 1-byte objects, storing the pointers in an array, then use free() to deallocate the chunks.
- Create an array of 120 pointers. Repeatedly make a random choice between allocating a 1-byte object and adding the pointer to the array and deallocating a previously allocated object 
  (if any), until you have allocated 120 times. Deallocate any remaining objects.
- Use malloc() to allocate 120 1-byte objects, storing the pointers in an array, then use free() to deallocate every other object.
    Then allocate 1 120-byte object. This checks for memory fragmentation and if fragmented memory coaleces        // maybe not
- Use malloc() to allocate maximum amount in memory array: 4096 bytes. use free() to deallocate (will be repeated 50 times)
- If there is a free 24 bytes at the end of the array and the user only asks for an int or char or byte or anything =< 8 bytes, you will need a 8 byte header, 8 byte payload, but instead of creating a new header, it allocates the 8 bytes back to the own payload. ie 8-byte header, 16-byte paylaod. 


Runtime Choices:
- added additional header to the beginning of the array with a pointer to the largest free chunk
    this allows for O(1) avg time when allocated memory 